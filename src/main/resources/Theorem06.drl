package com.geometry

//list any import classes here.

import com.geometry.Angle;
import com.geometry.Point;
import com.geometry.Line;
import com.geometry.Relation;
import com.geometry.GeoType;
import com.geometry.GeoRelation;
import com.geometry.Triangle;
import com.geometry.ExpressionRelation;
import com.geometry.RelationType;
import com.engine.CheckingEngine;
import com.test.Log;
import java.util.List;

rule "thorem6"

    when
        //conditions
        //get 2 triangle
        $PQR : Triangle()
        $XYZ : Triangle()
        //two different triangle
        eval(!$PQR.sameItem($XYZ))
        
        //get equal line
        $QR_YZ : GeoRelation( this.relationType == RelationType.GEO_RELATION,this.firstItem.type == GeoType.LINE, this.secondItem.type == GeoType.LINE, this.relation==Relation.EQUALS, 
         		$QR:((Line)firstItem), $YZ:((Line)secondItem) )
        
        //Equal lines should be in two triangles
        eval($PQR.isALine($QR))
        eval($XYZ.isALine($YZ))
        
        //get equal angles
        $PQR_angle_XYZ : GeoRelation( this.firstItem.type == GeoType.ANGLE, this.secondItem.type == GeoType.ANGLE, this.relation==Relation.EQUALS, 
        				 $PQRang: ((Angle)firstItem), $XYZang: ((Angle)secondItem))
        $QPR_angle_YXZ : GeoRelation( this.firstItem.type == GeoType.ANGLE, this.secondItem.type == GeoType.ANGLE, this.relation==Relation.EQUALS,
        				 $QPRang: ((Angle)firstItem), $YXZang: ((Angle)secondItem))
        //Should be different relations
        eval(!$PQR_angle_XYZ.sameRelation($QPR_angle_YXZ))
        
        //Equal angles should be in two triangles
        eval($PQR.isAnAngle($PQRang))
        eval($PQR.isAnAngle($QPRang))
        eval($XYZ.isAnAngle($XYZang))
        eval($XYZ.isAnAngle($YXZang))
        
        //Case 01
        //Equal line is the line which is common to equal angles of a tringle  
        eval(($PQRang.isALine($QR) && $QPRang.isALine($QR) && $XYZang.isALine($YZ) && $YXZang.isALine($YZ)) ||
        //Case 02
        //Equal line is the corrosponding angles to relevant angles
        	($PQR.getOppositeSide($PQRang).sameItem($QR) && $XYZ.getOppositeSide($XYZang).sameItem($YZ)) ||
        	($PQR.getOppositeSide($QPRang).sameItem($QR) && $XYZ.getOppositeSide($YXZang).sameItem($YZ))
        	)
           
    then
        //actions
		    //actions
	GeoRelation PQRconqXYZ = new GeoRelation($PQR, $XYZ, Relation.CONGRUENT);
    CheckingEngine.transitionKnowledgeHolder.insertGeoRelation(PQRconqXYZ);
    Log.logger.info("Theorem 06 : " +$PQR_angle_XYZ.getName()+" && "+$QPR_angle_YXZ.getName()+" && "+$QR_YZ.getName()
    				+ " --> "+PQRconqXYZ.getName());
    List<GeoItem> remainingPQRItems = $PQR.getRemainingAngles($PQRang,$QPRang);
    List<GeoItem> remainingXYZItems = $XYZ.getRemainingAngles($XYZang,$YXZang);
    
    Angle QRP = (Angle)remainingPQRItems.get(0);
    Angle YZX = (Angle)remainingXYZItems.get(0);
    
    GeoRelation QRPang_eq_YZXang = new GeoRelation(QRP,YZX,Relation.EQUALS);
    GeoRelation PQ_eq_XY = new GeoRelation($PQR.getOppositeSide(QRP),$XYZ.getOppositeSide(YZX),Relation.EQUALS);
    GeoRelation PR_eq_XZ = new GeoRelation($PQR.getOppositeSide($PQRang),$XYZ.getOppositeSide($XYZang),Relation.EQUALS);
    GeoRelation QR_eq_YZ =new GeoRelation($PQR.getOppositeSide($QPRang), $XYZ.getOppositeSide($YXZang),Relation.EQUALS);
    CheckingEngine.transitionKnowledgeHolder.insertGeoRelation(QRPang_eq_YZXang);
    CheckingEngine.transitionKnowledgeHolder.insertGeoRelation(PQ_eq_XY);
    CheckingEngine.transitionKnowledgeHolder.insertGeoRelation(PR_eq_XZ);
    CheckingEngine.transitionKnowledgeHolder.insertGeoRelation(QR_eq_YZ);
    
    Log.logger.info("Theorem 06 : " +PQRconqXYZ.getName()+" --> "+QRPang_eq_YZXang.getName());
    Log.logger.info("Theorem 06 : " +PQRconqXYZ.getName()+" --> "+PQ_eq_XY.getName());
    Log.logger.info("Theorem 06 : " +PQRconqXYZ.getName()+" --> "+PR_eq_XZ.getName());
    Log.logger.info("Theorem 06 : " +PQRconqXYZ.getName()+" --> "+QR_eq_YZ.getName());
    
    
    
	CheckingEngine.graph.addNode(PQRconqXYZ,"කෝ. කෝ. පා.", $QR_YZ, $PQR_angle_XYZ, $QPR_angle_YXZ, PQ_eq_XY, PR_eq_XZ, QRPang_eq_YZXang );
	CheckingEngine.graph.addNode(QRPang_eq_YZXang, PQRconqXYZ );
	CheckingEngine.graph.addNode(PQ_eq_XY, PQRconqXYZ );
	CheckingEngine.graph.addNode(PR_eq_XZ, PQRconqXYZ );
	CheckingEngine.graph.addNode(QR_eq_YZ, PQRconqXYZ );
    
end



/*package com.geometry

//list any import classes here.

import com.geometry.Angle;
import com.geometry.Point;
import com.geometry.Line;
import com.geometry.Relation;
import com.geometry.GeoType;
import com.geometry.GeoRelation;
import com.geometry.Triangle;
import com.geometry.ExpressionRelation;
import com.geometry.RelationType;
import com.engine.CheckingEngine;
import com.test.Log;
import java.util.List;

rule "thorem6"
no-loop true
lock-on-active
    when
        //conditions
        //get 2 triangle
        $PQR : Triangle()
        $XYZ : Triangle()
        //two different triangle
        eval(!$PQR.sameItem($XYZ))
        
        //get equal line
       
        $QR_YZ : GeoRelation( this.relationType == RelationType.GEO_RELATION,this.firstItem.type == GeoType.LINE, this.secondItem.type == GeoType.LINE, this.relation==Relation.EQUALS, 
         		$QR:((Line)firstItem), $YZ:((Line)secondItem) )
        
        //Equal lines should be in two triangles
        eval(($PQR.isALine($QR) && $XYZ.isALine($YZ)) || ($PQR.isALine($YZ) && $XYZ.isALine($QR)) )
        
        //get equal angles
        $PQR_angle_XYZ : GeoRelation( this.firstItem.type == GeoType.ANGLE,
        				 this.secondItem.type == GeoType.ANGLE, this.relation==Relation.EQUALS, 
        				 $PQRang: ((Angle)firstItem), $XYZang: ((Angle)secondItem))
        				 
        $QPR_angle_YXZ : GeoRelation( this.firstItem.type == GeoType.ANGLE,
        				 this.secondItem.type == GeoType.ANGLE, this.relation==Relation.EQUALS,
        				 $QPRang: ((Angle)firstItem), $YXZang: ((Angle)secondItem))
        
        
        //Should be different relations
        eval(!$PQR_angle_XYZ.sameRelation($QPR_angle_YXZ))
        
        //Equal angles should be in two triangles
        eval(($PQR.isAnAngle($PQRang) && $XYZ.isAnAngle($XYZang)) || 
        			(($PQR.isAnAngle($XYZang) && $XYZ.isAnAngle($PQRang)) ))

        eval(($PQR.isAnAngle($QPRang) && $XYZ.isAnAngle($YXZang)) || 
        			(($PQR.isAnAngle($YXZang) && $XYZ.isAnAngle($QPRang)) ))
        			
        			
//        eval($PQR.isAnAngle($QPRang))
//        eval($XYZ.isAnAngle($XYZang))
//        eval($XYZ.isAnAngle($YXZang))
        
        //Case 01
        //Equal line is the line which is common to equal angles of a tringle  
        //eval(($PQRang.isALine($QR) && $QPRang.isALine($QR) && $XYZang.isALine($YZ) && $YXZang.isALine($YZ)) ||
        //Case 02
        //Equal line is the corrosponding angles to relevant angles
        	//($PQR.getOppositeSide($PQRang).sameItem($QR) && $XYZ.getOppositeSide($XYZang).sameItem($YZ)) ||
        	//($PQR.getOppositeSide($QPRang).sameItem($QR) && $XYZ.getOppositeSide($YXZang).sameItem($YZ))
        	//)
           
    then
        //actions
		    //actions
	GeoRelation PQRconqXYZ = new GeoRelation($PQR, $XYZ, Relation.CONGRUENT);

    CheckingEngine.reasonHolder.addReason(PQRconqXYZ,"කෝ. කෝ. පා.");
    Log.logger.info("Theorem 06 : " +$PQR_angle_XYZ.getName()+" && "+$QPR_angle_YXZ.getName()+" && "+$QR_YZ.getName()
    				+ " --> "+PQRconqXYZ.getName());
    List<GeoItem> remainingPQRItems = $PQR.getRemainingAngles($PQRang,$QPRang);
    List<GeoItem> remainingXYZItems = $XYZ.getRemainingAngles($XYZang,$YXZang);
    
    Angle QRP = (Angle)remainingPQRItems.get(0);
    Angle YZX = (Angle)remainingXYZItems.get(0);
    
    GeoRelation QRPang_eq_YZXang = new GeoRelation(QRP,YZX,Relation.EQUALS);
    GeoRelation PQ_eq_XY = new GeoRelation($PQR.getOppositeSide(QRP),$XYZ.getOppositeSide(YZX),Relation.EQUALS);
    GeoRelation PR_eq_XZ = new GeoRelation($PQR.getOppositeSide($PQRang),$XYZ.getOppositeSide($XYZang),Relation.EQUALS);
    GeoRelation QR_eq_YZ =new GeoRelation($PQR.getOppositeSide($QPRang), $XYZ.getOppositeSide($YXZang),Relation.EQUALS);

    CheckingEngine.transitionKnowledgeHolder.insertGeoRelation(PQRconqXYZ);
	CheckingEngine.graph.addNode(PQRconqXYZ, $QR_YZ, $PQR_angle_XYZ, $QPR_angle_YXZ );

    CheckingEngine.transitionKnowledgeHolder.insertGeoRelation(QRPang_eq_YZXang);
    CheckingEngine.transitionKnowledgeHolder.insertGeoRelation(PQ_eq_XY);
    CheckingEngine.transitionKnowledgeHolder.insertGeoRelation(PR_eq_XZ);
    CheckingEngine.transitionKnowledgeHolder.insertGeoRelation(QR_eq_YZ);


	CheckingEngine.graph.addNode(PQRconqXYZ, $QR_YZ, $PQR_angle_XYZ, $QPR_angle_YXZ );
	CheckingEngine.graph.addNode(QRPang_eq_YZXang, PQRconqXYZ );
	CheckingEngine.graph.addNode(PQ_eq_XY, PQRconqXYZ );
	CheckingEngine.graph.addNode(PR_eq_XZ, PQRconqXYZ );
	CheckingEngine.graph.addNode(QR_eq_YZ, PQRconqXYZ );
    
    Log.logger.info("Theorem 06 : " +PQRconqXYZ.getName()+" --> "+QRPang_eq_YZXang.getName());
    Log.logger.info("Theorem 06 : " +PQRconqXYZ.getName()+" --> "+PQ_eq_XY.getName());
    Log.logger.info("Theorem 06 : " +PQRconqXYZ.getName()+" --> "+PR_eq_XZ.getName());
    Log.logger.info("Theorem 06 : " +PQRconqXYZ.getName()+" --> "+QR_eq_YZ.getName());
    
   // System.out.println("traingle cong");
	//insert(PQRconqXYZ);
	//insert(QRPang_eq_YZXang);
	//insert(PQ_eq_XY);
	//insert(PR_eq_XZ);
	//insert(QR_eq_YZ);
    
end


*/
